@model AYMDatingCore.PL.Models.UserHistoryTBL_VM


<style>
    .profile-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #ffe6f0, #ffc2d1, #ffb6c1);
        background-size: 400% 400%;
        animation: bgFlow 10s ease infinite;
        padding: 20px;
    }

    @@keyframes bgFlow {
        0% {
            background-position: 0% 50%;
        }

        50% {
            background-position: 100% 50%;
        }

        100% {
            background-position: 0% 50%;
        }
    }

    .profile-card {
        background: #fff;
        border-radius: 25px;
        padding: 30px 40px;
        max-width: 850px;
        width: 100%;
        box-shadow: 0 8px 25px rgba(255, 105, 180, 0.3);
        transition: all 0.3s ease;
    }

        .profile-card:hover {
            transform: translateY(-5px);
        }

    .profile-header {
        position: relative;
    }

    .profile-img {
        width: 150px;
        height: 150px;
        object-fit: cover;
        border-radius: 50%;
        border: 5px solid #ff69b4;
        box-shadow: 0 0 15px rgba(255, 105, 180, 0.6);
    }

    .text-rose {
        color: #ff1493;
    }

    .section-title {
        color: #ff1493;
        font-weight: bold;
    }

    .romantic-text {
        color: #444;
        font-size: 1.05rem;
        line-height: 1.6;
    }

    /* --- PHOTO GALLERY --- */
    .photo-gallery {
        text-align: center;
    }

    .photo-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 15px;
        justify-content: center;
    }

    .photo-card {
        position: relative;
        overflow: hidden;
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(255, 105, 180, 0.3);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
    }

        .photo-card img {
            width: 100%;
            height: 130px;
            object-fit: cover;
            border-radius: 15px;
            transition: transform 0.3s ease;
        }

        .photo-card:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(255, 105, 180, 0.4);
        }

            .photo-card:hover img {
                transform: scale(1.1);
            }

    /* --- FULLSCREEN PREVIEW --- */
    .image-preview-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.85);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease;
    }

        .image-preview-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .image-preview-overlay img {
            max-width: 90%;
            max-height: 90%;
            border-radius: 20px;
            box-shadow: 0 0 25px rgba(255,255,255,0.3);
            animation: zoomIn 0.3s ease;
        }

    @@keyframes zoomIn {
        from {
            transform: scale(0.7);
            opacity: 0;
        }

        to {
            transform: scale(1);
            opacity: 1;
        }
    }

    .profile-actions {
        display: flex;
        justify-content: center;
        flex-wrap: wrap; /* ✅ allows wrapping on small screens */
        gap: 15px;
        width: 100%;
        margin-top: 20px;
    }

    /* Buttons will now adapt to smaller screens */
    .action-btn {
        background: white;
        border: 2px solid #ff69b4;
        border-radius: 50px;
        padding: 10px 25px;
        font-size: 1rem;
        color: #ff69b4;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center; /* ✅ centers icon and text */
        gap: 8px;
        box-shadow: 0 5px 10px rgba(255, 105, 180, 0.2);
        min-width: 120px; /* ✅ makes buttons evenly sized */
    }

    /* ✅ Optional: smaller padding and font-size for phones */
    @@media (max-width: 600px) {
        .action-btn

    {
        font-size: 0.9rem;
        padding: 8px 18px;
        min-width: 100px;
    }

    }

        .action-btn:hover {
            background: #ff69b4;
            color: white;
            transform: translateY(-3px);
        }

        .action-btn i {
            transition: color 0.3s ease;
        }

        .action-btn.liked i {
            color: red;
        }

        .action-btn.favorited i {
            color: gold;
        }

        .action-btn.blocked i {
            color: gray;
        }
</style>

<div class="profile-container">
    <div class="profile-card shadow-lg">
        <div class="profile-header text-center">

            <!-- Main Profile Image -->
            @if (!string.IsNullOrEmpty(@Model.MainImageUrl))
            {
                <img src="@Model.MainImageUrl" alt="Profile Image" class="profile-img" />
            }
            else
            {
                <img src="~/Images/Main/blankprofile973460_1280-172650025.png" alt="Profile Image" class="profile-img" />
            }

            <h2 class="mt-3 text-rose">@Model.AppUser?.UserName</h2>
            <p class="small text-muted">
                @Model.Gender?.Name • @Model.Country?.Name • @Model.City
            </p>
            <p class="small text-muted">
               Looking for someone between: @Model.SearchAgeFrom • @Model.SearchAgeTo
            </p>
        </div>

        <!-- Gallery Section -->
        <div class="photo-gallery mt-4">
            <h4 class="section-title text-center">📸 My Photos</h4>
            <div class="photo-grid mt-3">
                @if (Model.UserImageTBL_VM != null && Model.UserImageTBL_VM.Any())
                {
                    foreach (var photo in Model.UserImageTBL_VM.Take(5))
                    {
                        <div class="photo-card">
                            <img src="@photo.ImageUrl" alt="User Photo" class="gallery-img" />
                        </div>
                    }
                }
                else
                {
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="photo-card">
                            <img src="~/Images/Main/blankprofile973460_1280-172650025.png" alt="User Photo" class="gallery-img" />
                        </div>
                    }
                }
            </div>
        </div>

        <div class="profile-body mt-4">
            <h4 class="section-title">💖 About Me</h4>
            <p class="romantic-text">@Model.AboutYou</p>

            <h4 class="section-title mt-4">🌹 My Partner Should Be</h4>
            <p class="romantic-text">@Model.AboutPartner</p>

            <hr />

            <div class="row mt-3">
                <div class="col-md-6">
                    <p><strong>🎓 Education:</strong> @Model.Education?.Name</p>
                    <p><strong>💼 Job:</strong> @Model.Job?.Name</p>
                    <p><strong>💍 Marital Status:</strong> @Model.MaritalStatus?.Name</p>
                </div>
                <div class="col-md-6">
                    <p><strong>🗣️ Language:</strong> @Model.Language?.Name</p>
                    <p><strong>🎯 Purpose:</strong> @Model.Purpose?.Name</p>
                    <p><strong>💰 Financial Mode:</strong> @Model.FinancialMode?.Name</p>
                </div>
            </div>
        </div>

        <hr />
         @if (UnitOfWork.SignInManager.IsSignedIn(User))
        {
            if (User.Identity.Name != Model.AppUser.UserName && User.IsInRole("User"))
            {
                <div class="profile-actions text-center mt-4">
                    <button id="likeBtn" class="action-btn like-btn" title="Like">
                        <i class="fas fa-heart"></i> Like
                    </button>

                    <button id="favoriteBtn" class="action-btn favorite-btn" title="Add to Favorites">
                        <i class="fas fa-star"></i> Favorite
                    </button>

                    <button id="blockBtn" class="action-btn block-btn" title="Block User">
                        <i class="fas fa-ban"></i> Block
                    </button>

                    <button id="chatBtn" class="action-btn chat-btn"
                    onclick="window.location.href='@Url.Action("Chat", "User", new { RecieverUserName = Model.AppUser.UserName })'">
                        <i class="fas fa-comments"></i> Chat
                    </button>
                </div>
            }
        }
    </div>
</div>

<!-- Fullscreen Image Preview -->
<div class="image-preview-overlay" id="imagePreviewOverlay">
    <img id="previewImage" src="" alt="Preview" />
</div>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        const images = document.querySelectorAll(".gallery-img");
        const overlay = document.getElementById("imagePreviewOverlay");
        const previewImage = document.getElementById("previewImage");

        images.forEach(img => {
            img.addEventListener("click", () => {
                previewImage.src = img.src;
                overlay.classList.add("active");
            });
        });

        overlay.addEventListener("click", () => {
            overlay.classList.remove("active");
        });
    });
</script>

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        // Like button toggle
        document.getElementById("likeBtn").addEventListener("click", function () {
            this.classList.toggle("liked");
            const liked = this.classList.contains("liked");
            this.querySelector("i").className = liked ? "fas fa-heart" : "far fa-heart";
            this.textContent = liked ? " Liked" : " Like";
            this.prepend(this.querySelector("i"));
        });

        // Favorite button toggle
        document.getElementById("favoriteBtn").addEventListener("click", function () {
            this.classList.toggle("added");
            const added = this.classList.contains("added");
            this.querySelector("i").className = added ? "fas fa-star" : "far fa-star";
            this.textContent = added ? " Favorited" : " Favorite";
            this.prepend(this.querySelector("i"));
        });

        // Block button toggle
        document.getElementById("blockBtn").addEventListener("click", function () {
            this.classList.toggle("blocked");
            const blocked = this.classList.contains("blocked");
            this.querySelector("i").className = blocked ? "fas fa-ban" : "far fa-ban";
            this.textContent = blocked ? " Blocked" : " Block";
            this.prepend(this.querySelector("i"));
        });

        // Chat button (redirect or open modal)
        document.getElementById("chatBtn").addEventListener("click", function () {
            // Replace with your chat URL or modal logic
            window.location.href = '/Chat/WithUser?id=@Model.AppUser?.Id';
        });
    </script>
}